28 Aug 2022
The point of this section is to provide an overview of C++
without going into too much detail. 
Other than the most basic language facilities we will hear
about structures, classes, and enumerations. 
He'll talk a bit a bout separate compilation, namespaces, 
and error handling. 

- Model of memory and computation, along with other basic facilities. Chapter discusses the 
aspects of the language that support 'procedural' programming. 

- Gives an overview of the entire language, does not talk about the differences in C, C++98, 
or what's new in C++11

2.2 The compilation process has several steps
1) The preprocessor processes the file and deals with all # directives. Includes, Define, and
preprocessor macros, etc. I ran 'clang -E example.cpp' and it appended what looks like the 
entirely of the header file (27000~ lines) the top of my .cpp file. File was 735K
2) The compiler compiles everything down to a binary object file (.o) that the linker then
links together. I ran 'clang -c example.cpp' and it output example.o. File was 2.6K Clearly 
it reduces the file size. I also ran the proprocessor against the minimal program and it just 
added a handfull of line that look preprocessor directives themselves (?).
3) The linkers job is to take all the object files and 'link' them into an executable binary. 

For g++ you can specifify the standard you want to compile by using -std=C++20, or whatever
standard you want to use. 

{} represents grouping in C++

<< writes it's second arg (right) onto it's first (left)

return type 'void' indicates that that function does not return a value 

2.2.2 
A Type definesa set of possible values for and a set of operations.
An Object is some memory that holds a value of some type.
A Value is set of bits interpretted according to a type.
A Variable is a named object.

C++ provides several fundamental types including bool, char, int, double which coorespond 
directly to hardware facilities and which have a fixed size measured in bytes. These types
are implementation defined, which means a char doesn't always have to be an 8 bit bytes on 
every system. 

{} list initialization does NOT allow narrowing. You can also do ={} where you're 
reassigning to an already initialized value. 

If you try to initialize a value with a type that would result in truncation with {}, it'll
throw a fit. Unless you use static_cast<T>(value) it'll raise an error and won't compile. 
Needing to use a static_cast<> indicates a design error. Theres not a great reason to 
cast a double as an int, etc. 

const is mainly used for specifying interfaces and protecting data when passing into functions
this seems to be more of a compiler time check because if you pass into a reference to something
and declare it as a const in the function signature, then the program won't compile if you try
to change the data (ie. *reference = new value) or something similar. seems to just be another 
layer of the static type checking system

not 100% sure about the differences between " " and ' '. 
'A' is a char literal. 
"ABC" is a string literal which is an array of char
You can't compare 'A' to "B" with == because there isn't a conversion that makes sense. 
"a" is a char array and returns a pointer to first element 
ie. const char*, *"a" gives you 'a'

Pointers, Arrays, and Loops. 
The size of an array must be a constant expression.

& is the address of operator
you can use this in range-for statements to pass by ref instead of by copy 
a reference cannot be made to refer to a different object after initialization 

You should check your pointers to make sure they point at what they're supposed to point at. 
C-style string are 0 terminated. Something like this 'this is a string\0' and you know you've gone past the last char when you find \0;
In order code, 0 or NULL is usually used instead of nullptr. nullptr avoids confusion between 0 and NULL. 

I think that I understand everything that has been presented so far. I'm trying to take it slow and really work through all the examples so that later on I don't 
get caught flat footed. 

2.3 User defined types
The built-in types and operations are rich, but low level. Higher level tools and abstractions
can be built from what the languge provides. Types built utilizing C++'s abstraction mechanisms
are called 'user defined types.'
They are called classes and enumerations. I do not know what an enumeration is. 

Building a user defined type has a number of things that go into it, 
The first step is to figure out and organize what elements it needs into a struct. 

After defining what elements you need, you need to initialize those elements. We used a void, 
that accepts a reference to our vector, and a size. 

Developed the following elements for our custom type:
- a struct for organizing the elements
- an initializer function
- a function to do something with the data

the main issue pointed out with what we have is that the user has to know everything about the 
implementation. to do anything they have to provide a size, know how to access the array, and
how to call the initializer. it does seem somewhat manual. if I wanted to iterate through elem I 
would need to also know the size and manual increment the pointer to go through the elems. 
I couldn't utilize C++ iterators. 
It would be usable for small things where I don't mind manually working through everything each 
but if I were to pass it into a function, the function wouldn't know what to do with it. 
Basically it's not usable by any of the standary library algorithms such as sort, etc. 

I need to think of FUNCTIONS as USERS. The FUNCTIONS often USE MY TYPES. 

. allows us to access struct members though a name like name.size
-> allows us to access struct members through a pointer such as when we've passed a vector
by reference. pointer->size for example 

2.3.2 Classes
I constructed the sort of precurser to a class in "user_defined_types.cpp"
Classes seem almost like syntactic sugar and I need to investigate further to find out what 
the differences are between using a struct + initializer function + functions that act on an 
instance of the struct 
vs 
just using classes

In the case of the Vector class we designed, the instances act primarily as a resource handle. 
That is, they hold a pointer to some allocated memory, and the member functions allow us to 
access, write/read, and act upon the data in some way. 

2.3.3 Emumerations
I have no idea what these are. They seem silly, What am I missing?
Seems like it's just mapping things to integers? 
Sort of seems like namespaces but for types? 
"Enumerations are used to represent small sets of integer values" 
Maybe it's just easier to use enums than variable names? Don't descriptive variable names
solve the same problem though? 

Integral Constants are whole numbers pretty much. ( I think )

Learned about typedef on my own. Basically allows you to establish type aliases so that instead
of thinking of particular variables as ints you could think of them as score_types or some Other
more relevant data type. It's a form of primitive abstraction. 

I'm still not 100% about enums but I've done the excersizes and I kind of understand. Still not sure
what a good application for enums would be. Probably just need to see more examples which I'll make A
point to look into after the "tour". 

2.4 Modularity 'modularity_1.cpp'
programs are Developed as many smaller parts. You must have clearly defined interactions between these parts or you will soon
loose the plot and have a difficult time implementing your design. 
You must distinguish betwen interface and implementation. 
interfaces are represented as declarations. 

You can declare member elements such as an int or pointer to an array within the class declaration. probably want those to be private. 
Then you can declare member functions of a class and either define them within the class block, or elsewhere with ClassName::functionName 
Member functions have access to the private members of the class. 

2.4.1 Seprate Compilation 
It's possible to separate declarations and definitions into different files. 
Vector.h    declarations
Vector.cpp  definitions, includes the header
VectorUser.cpp includes the header 

Should including the header somehow automatically
cause the Name.cpp file to get pulled in somehow? 
problem: Nowhere are my definitions included. 

solution: simply doing clang++ VectorUser.cpp won't work because it doesn't have the Vector.cpp implementation code
you have do specify BOTH to the complier. This is probably where understanding build tasks would be nice. 
"clang++ Vector.cpp VectorUser.cpp -o VectorTest" don't need to specify the Vector.h because it's included already 

2.4.2 Namespaces
Allows you to group declarations together in their own namespace where they cannot collid with the same names in other namespaces. 

2.4.3 Error Handling 
Use it.
try / catch etc.
you'll need to include stdexcept. also learned that exception types like out_of_range are TYPES, which means that when passed into 
catch you can access the what() by doing somethign like catch(ExceptType e){std::string error = e.what()}

2.4.3.2 Invariants
When we define a function we should consider what preconditions must be met for the function call to suceed, and think about if it's feasable to 
test for those conditions. conditions that MUST always be met are part of the INVARIANT. 

Not extremely germain to invariants but the author does mention half-open ranges which are written as [range), this basically means that the range
is left-inclusive, but right-exclusive. the right most value is NOT part of the range. maybe it's a \0 like in a C-style string or something or it 
could like where an array can be said to have 5 elements, but you can't access element 5 because numbering starts at 0. so the range would be 
[number_of_elements)

A statement about what is assumed to be true about the object during its like is the INVARIANT of the object. 
For example a Vector cannot have -23 elements because that makes no sense. 

Maybe it would make sense to force all member functions to be wrapped in an invariant-enforcer function, or to make each one of them call a
function that enforces the invariant before returning. 

The notion of invariants is central to the design of classes. They help us understand exactly what we want and they force us to be specific. 

2.4.3.3 Static Assertions
maybe we've written an application that does a lot of math with huge numbers. we need to make sure the hardware on the system we're on
can support this with suffiently large ints. an unsigned 32bit int (4 bytes) can hold up to 2,147,483,647 and if this is not large enough
we need to figure out a work-around or else refuse to compile. 


If slowly work through this chapter then I should fully understand the syntax and all the basic built-in types when I emerge from the other end. 

6.1 The C++ ISO Standard
The standard cannot tell you what good code looks like, only what the programmer can and cannot rely on from an implementation. 

Many things are deemed 'implementation defined' by the standard. What exactly does this mean? Each implementation must provide a specific, well-defined 
behavir for a construct and that behavior must be documented. Examples:

unsigned char c1 = 64;  // well defined. a char always has at least 8 bits. 
unsigned char c2 = 1256;    // implementation defined, will result in shortening if a char has only 8 bits on the specific implementation. 

0b10011101000 = 1256    requires 11 bits to represent, truncate to 8 bits. if you have a 16 bit char this would be fine. 
   0b11101000 = 232     cut off all the bits left of position 8 and you end up with 232

Most implementation defined features will relate to differences in the hardware used to run the program. 

Behaviours can also be 'unspecified'. This means that there is a range of possible behavior that is acceptable. 
Many assumptions about implementation-defined features can be checked by stating them as static assertions. 

To maximize portability we should be explicite about what implementation defined features we rely on. 
We would present all dependencies on hardware sizes in the form of constants in a header file. 

Optimizers can further complicate a problem where undefined behavior is concerned because the consequences become further abstracted and unpredicable.

There are different types of implementation FREESTANDING and HOSTED. 
A freestanding implementation may provide fewer std libs and may provide the following separatly: cstdef, cfloat, limits, climits, cstdint, csdtlib, new, typeinfo, 
exception, initializer_list, cstalighn, cstdarg, cstdbool, type_traits, atomic
Some implementations also provide a non-standard exeption-free environment for close-to-the-hardware environments. 

6.1.2 The basic source character set 
Some char sets might not include all the chars we use for coding such as [ or {. Doesn't really concern me yet. 

6.2 Types
consider x=y+f(2);
the names x, y, and f must be declared for this fragment to have any meaning. 

There are several fundamental types from which everything else is constructed.
integral types (bool & char & int)
arithmetic types (integral types & floating point types)
integral means essential or fundamental 
these types are provided in a variety of sizes to give the programmer a choice about the ammount of storage consumed, the precision, and the range available for computations. 

How are floats represented in memory? (sidetrack)
significant == mantissa 
3.14159 decimal == 0.7853975 * 2^2 
0.7853975 is the mantissa 

 3 32222222 22211111111110000000000
 1 09876543 21098765432109876543210
+-+--------+-----------------------+
| |        |                       |
+-+--------+-----------------------+
sign exponant mantissa
I will spend some time on this eventually but it's too far off course for right now. 

6.2.3 Character types
Several distinct types. char, signed char, unsigned char, wchar_t, char16_t, char32_t

A char is almost always 8 bits, which meanst it can hold 256 different values. 
There are some assumptions that are not safe to make, for example a char might not be a byte on certain embedded processors that lack byte accessing hardware. 

if you add an int to a char, the char gets converted to an int and the whole expression returns an int 

the int ==> char exersize makes sense now. It's all about the datatype, because that determines how the value is represented. also, cout will represent it based on the 
datatype. 

6.2.3.1 Signed and unsigned characters
a plain char could be signed, or unsigned. this is implementation specific. it could range from 0 to 255, or -127 to 127
on a machine where char is signed 11111111 == -1, unsigned 11111111 == 255

I don't really understand why this is. I would expect 00000001 to 1, and 100000001 to be -1 
Ok I figured it out. Why bother with using the far right but as 1, when you're already using the far left bit as a -1. 
11111111 == 255, or -1 if unsigned
00000000 == 0, 10000000 would be -0 which makes no sense so we skip it and do 11111111 to mean -1, then we flip the bits 
11111110 == -2 

all the ascii symbols are stuck between 0 and 127 so they'll work whether the char is signed or unsigned. there are just some subleties about the concept of a 
signed char that are mysterious to me still. 

// so basically the way it works with a signed char is that they run from 0 to 127 and -127 back down to -1 when the underlying value is represented as usign char 

6.2.3.2 Character Literals 
We can represent a character from the implementation character set as a one, two, or three digit octal number like \000 or as a hex number like \x000

Some notes about istream >> char in a for loop like for(auto x : cin >> x){ print(x) }
It's important to fully realize that cin is a stream, and so it behaves like a stream. cin askes for input and fills its internal representation with the provided chars. 
Then when you apply the extraction operator it moves a char into x and returns true, this happens as many times as it is valid to do to. when it has spit its entire 
representation out it sets an error bit and the returns false to the condition check. in this way you can manage streams directly. 

6.2.4 Integer Types
each integer types comes with three forms, plain, signed int, and unsigned int 
they also come in four sizes. short int, int, long int, long long int 
The unsigned types are great for used that treat storage as a bit array. 
Additional integer types are available in <cstdint> 
- int64_t signed int with exactly 64 bits
- uint_fast16_t unsigned, 8 bits, supposedly the fast int but it seems like it would be hardware dependent 
- int_least32_t

6.2.4.1 Integer Literals
You can represent integers as hex values like 0xFFFF (65535)

6.2.4.1 Types of Integer Literals 
A decimal with no suffix will be represented as the first of these types in which it can be represented. 
int, long int, long long int 

on my system a short int appears to be a signed 16bit value, ie 65535 truncates to -1
a short unsigned int can hold up to 65535
a short signed int can hold up to 32767

a literal in the form 2.14748365e-9 is necessarily a double and will try to implicitly convert to a double 

6.2.5
Floating points are a totally different beast from integers
all int types directly map their values into the bits and so the largest number they can represent is determined by the available bits. 
floats utilize a different scheme and are composed of an exponant and a mantissa. I will watch some youtube videos on it. 
The default floating point is a double, for example 3.34 or 2.23423e+23 will be doubles. 
You need to specify plain floats like 2.3F and longs like 2342.33332342L. The suffix gives the literal a type. 
I need to master float points before I move to anything else. 

I spent a couple hours learning some things about binary that I was never clear on and I'll sum them here to test myself. 
1-s compliment - this is basically where you just flip the bits on all negative values, and set the sign value to 1. This has a problem where you end up with 
0: 0000 and also -0: 1111. Also, whenever you do an addition, you have to range shift the answer each time. Also, carrys have to be kicked back around to the right 
side which makes hardware design a pain 

2-s compliment is different. It's similar to 1-s compliment in the sense that you still take the compliments of a number to make it negative, but the entire set of 
negative numbers is mapped differently. 

to make a positive binary a 2-s compliment negative, apply this algorithm. 
1) Add -1 to the number, ie. 0010(2)+1111(-1) == 1100
2) take the compliment to obtain -1 : 1100

to make a negative into a positive you do this:
1) take the compliment
2) add 1

Also learned about float point numbers. IEEE 754
1 sign bit, 8 exponant bits, 23 mantissa bits with the MSB implied so actually 24 bits of storage

1) have a number like 23.345

2) convert the number to pure binary like 10111.00111110101110000101

3) normalize the number 1.011100111110101110000101 * 2^4

4) bias the exponant, for IEE475 32 bit the bias is 127. 4 + 127 = 131

5) convert exp to bin. 131 : 10000011

6) place in bits according to position. Truncate left most bit from mantissa. 

|0|10000011|01110011111010111000010|
 ^     ^              ^
 |     |              |-- mantissa 
 |      --- exponant
 |--- sign bit

01000001101110011111010111000010 = 23.345
01000001101110101100001010001111

6.2.7 Void
There are no object of type void. Void it used as a psuedotype to indicate that a function returns no value. 

6.2.8 sizes
The exact size of an int is implementation dependent, so hardcoding sizes is a bad idea and will harm portability.
Don't make unwise assumptions about the portability of types. 
For example, if a system has a 32 bit int, and you require an int that has 32 bits, don't assume that all systems have a 32 bit int. Check the environment and
pick the types appropriate for your application. 

If you want a particular size of int you can include <cstdint> whic defines a variety of type aliases

<cstddef> defines size_t which is an implementation defined unsigned int type that can hold the size in bytes for any object. 
<cstddef> also defined ptrdiff_t which hold the result of subtracting to ptrs to get the number of elements 

6.2.9 Alignment
An object doesn't only need enough storage to hold it's representation, it also needs the proper alignment in order for the data to be accessible, efficiently, or at all. 
What are boundaries? 
A 4-byte int often has to be aligned on on a word (4-byte) boundary. What does this mean? 
It sounds like you can't just store whatever you want at any address. The address must be divisible according to the data type. 
Bytes can go anywhere. 
Halfword data must have even number addresses
Word data must have addresses divisble by 4
Doubleword Data must have addresses divisble by 8 
So basically memory is chunked out into boundaries, and you just have to fit data in where appropriate. 
the 'buffer' placeholder syntax in the example is confusing. not sure what he's trying to convey. 
I'm not going to worry about alignment since it's unlikely i'll need to care for a quite a while. 

6.3 Declarations
You have to declare things so the compilers knows what they are. 
extern tells the compiler that the variable is defined in another source module outside the current scope. 
Definitions that do not set aside memory do not belong in interfaces. 

6.3.1 Structure of Declarations
*(*)[] what the hell does this mean? 
I see some indication that maybe it's a function pointer but the syntax seems to be missing something. 

The most common declarator operators: 
pre * pointer
pre *cont const pointer
pre *volatile pointer
pre & lvalue ref
pre && rvalue ref
pre auto - function - infer return type
post [] array
post () function
post -> returns from function 

postfix declarator operators bind tighter than the prefixes 
char* kings[] is an array of pointer to char
char(*kings[]) is a pointer to an array of char 
you have to use parenthesis to express types such as "pointer to array" and "pointer to function" 

I think I by bind tighter, they mean 'takes precidence'

char* kings[], first we care about the array operator (postfix)
   1) kings is an array - what is kings an array of? 
   2) next we see the pointer operator (prefix) so we know that the array hold pointers to chars

char (*kings[])
   the post and pre operators are grouped to kings with a set of parens, this inverts the precidence
   1) kings is a pointer - what is kings a pointer to? 
   2) we then care about the array operator, so we know that kings is a pointer to an array
   3) what is kings a pointer to an array of? kings is a pointer to an array of chars

I really hate this syntax because it is ambiguous but I'll let it sink in. this is probably one of those times where I have to forget
about being able to read and parse the syntaxs meaning, and just remember that it means when I see parenthesis grouping together a postfix, prefix, and a name  

char (*kings())
   1) the prefix, postfix, and name are grouped by parens so the precidence is inverted
   2) kings is a pointer
   3) kings is a pointer to a function 

as a note, the ++ operator appears to return whatever value it increments 

The takeaway, parenthesis make a big difference. Think carefully about this. 

6.3.3 Names 
Use them

6.3.3.1 Keywords
C++ has a lot of Keywords
out of these I know the following: 
char, constexpr, do, extern, if, new, or, static_asset, typename, alignof, char16_t, double, false, inline, return, throw, wchar_t, 
and, bool, char32_t, continue, float, int, not, private, short, struct, true, unsigned, while, break, class, else, for, long, signed, switch, 
try, using, xor, case, default, enum, nullptr, public, sizeof, template, virtual, auto, catch, const, delete, namespace, operator, this, void

I do not know these, or do not understand them well. 
bitand, reinterpret_cast
thread_local
volatile
bitor
or_EQ
union
and_eq
decltype
not_eq
protected
assume
complicate
friend
mutable
typedef
xor_eq
explicite
register
static
typeid

6.3.4 Scope 

6.3.5 Initialization 

6.3.5.3 The decltype() Specifier
We can use auto when we have a suitable initializer. But sometimes we want to have a type deduced without defining an initialized variable. 
Consider a function that adds two matrices of potentially different types. What should be the type of the result of the addition.? 
What should be the type of its elements? 

template<class T, class U>
auto operator+(const Matrix<T>& a, const Matrix<U>& b) −> Matrix<decltype(T{}+U{})>
// accept two matrices that might hold items of different types 
// return a matrix where the element type is the sum of the types of T and U
{
   Matrix<decltype(T{}+U{})> res;
   for (int i=0; i!=a.rows(); ++i)
      for (int j=0; j!=a.cols(); ++j)
         res(i,j) += a(i,j) + b(i,j);
   return res;
}

In c++ there are two syntaxes for function declaration: 

Type Identifier (args)

auto Identifier (args) -> return type 

In a template, the keywords class and typename are interchangable in the basic case of specifying a template: 
Based on what I'm seeing, the class keyword limits it to classes, but typename will work for all. 

How on earth do you call a template function? 

6.4 Objects and Values - this section will be critial to understand completely. 
and Object is a contiguous region of storage, and an L value is something that refer to that Object 
a nonconst object is often called a modifiable L value. 

6.4.1 Lvalues and Rvalues - again, critical to understand 
An L value refers to an area of contigous storage. example. 

int sz { 64 }
char (*arr[]) { new char[sz] }; 
Arr is an L value that holds a pointer to a location in memory where an array of chars is stored. 
In this case, sz is an L value because it refers to the location in memory where 64 is stored, however temporarily. 

There are two properties when it comes to addressing, copying, and moving: 
Has Identity: the program has the name of, pointer to, or reference to the object so that it is possible to determine if two objects are the same. 
   ie. Are their addresses the same? 

Movable: can the object be moved instead of copied? 

lvalues: has identity, not Movable
rvalues: is movable

vectors provide mode semantics, which is pretty cool. 

6.4.2 Lifetimes of Objects
Automatic - normally objects are destroyed when they go out of scope 
Static - the object is never destroyed and lives at the same address until program termination 
Free store - created with new and destoyed with delete
temp objects - eg. intermediate results in a computation or an object used to hold a value for a reference to const argument.
               they live till the end of the full expression that they are a part of. their lifetime is detemined by their use. 
thread-local objects - objects are created when their thread is, and destoyed when their thread is 

static and automatic are STORAGE CLASSES 

6.5 Type aliases
using Pchar = char*; // Pchar is an alias for char* 

typedef char* Pchar; // older syntax that means the same thing as the using version 